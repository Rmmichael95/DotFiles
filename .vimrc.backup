" Maintainer: Ryan M Sullivan
" Last Change: September 9, 2018
" ------------------------------------------------------------------------------
" Vim Configuration
" ------------------------------------------------------------------------ " {{{1
" ========{ Plugins }===================================================== " {{{2

if has('nvim')
    runtime! python_setup.vim
endif

" ----[ Dein ]------------------------------------ {{{3

if &compatible
    set nocompatible
endif

set runtimepath+=/home/ryanm/.nvim/bundles/repos/github.com/Shougo/dein.vim

if dein#load_state('/home/ryanm/.nvim/bundles')
    call dein#begin('/home/ryanm/.nvim/bundles')
    call dein#add('/home/ryanm/.nvim/bundles/repos/github.com/Shougo/dein.vim')
    call dein#add('Shougo/dein.vim')
    call dein#add('Shougo/deoplete.nvim', {'on_i': 1})
    if !has('nvim')
        call dein#add('roxma/nvim-yarp')
        call dein#add('roxma/vim-hug-neovim-rpc')
    endif
    call dein#add('Shougo/neoinclude.vim')
    call dein#add('Shougo/neco-syntax')
    call dein#add('voldikss/vim-mma')
    call dein#add('Shougo/neco-vim', {'on_ft': 'vim'})
    call dein#add('zchee/deoplete-zsh', {'on_ft': 'sh'})
    call dein#add('carlitux/deoplete-ternjs', {
                \ 'build': 'npm install -g tern',
                \ 'on_ft': 'java',
                \ })
    call dein#add('othree/jspc.vim')
    call dein#add('autozimu/LanguageClient-neovim', {
                \ 'rev': 'next',
                \ 'build': 'bash install.sh',
                \ 'on_ft': ['c', 'cpp', 'py', 'haskell', 'rust'],
                \ })
    call dein#add('ervandew/supertab')
    call dein#add('/usr/bin/fzf')
    call dein#add('junegunn/fzf')
    call dein#add('starcraftman/vim-eclim', {'on_ft':'java'})
    call dein#add('tpope/vim-endwise')
    call dein#add('tpope/vim-commentary')
    call dein#add('tpope/vim-repeat')
    call dein#add('tpope/vim-dispatch')
    call dein#add('radenling/vim-dispatch-neovim')
    call dein#add('tpope/vim-fugitive',
                \ { 'on_cmd': ['Git', 'Gstatus', 'Gwrite', 'Glog', 'Gcommit', 'Gblame', 'Ggrep', 'Gdiff']})
    call dein#add('tpope/vim-surround')
    call dein#add('jiangmiao/auto-pairs')
    call dein#add('neomake/neomake')
    call dein#add('godlygeek/tabular', {'on_cmd':'Tabularize'})
    call dein#add('jeffkreeftmeijer/vim-numbertoggle')
    call dein#add('ntpeters/vim-better-whitespace')
    call dein#add('christoomey/vim-tmux-navigator')
    call dein#add('easymotion/vim-easymotion')
    call dein#add('wincent/ferret')
    call dein#add('powerman/vim-plugin-viewdoc')
    call dein#add('SirVer/ultisnips')
    call dein#add('honza/vim-snippets')
    call dein#add('jgdavey/tslime.vim')
    call dein#add('benmills/vimux')
    call dein#add('qpkorr/vim-bufkill')
    call dein#add('mhinz/vim-startify')
    call dein#add('luochen1990/rainbow')
    call dein#add('terryma/vim-multiple-cursors')
    call dein#add('chrisbra/NrrwRgn')
    call dein#add('tmhedberg/SimpylFold')
    call dein#add('tpope/vim-sleuth')
    call dein#add('vim-scripts/L9')
    call dein#add('sheerun/vim-polyglot')
    call dein#add('dhruvasagar/vim-table-mode')
    call dein#add('vim-airline/vim-airline')
    call dein#add('ctrlpvim/ctrlp.vim')
    call dein#add('Shougo/vimproc.vim', {'build':'make'})
    call dein#add('mbbill/undotree', {'on_cmd':'UndotreeToggle'})
    call dein#add('scrooloose/nerdtree', {'on_cmd':['NERDTreeToggle','NERDTreeFind']})
    call dein#add('Xuyuanp/nerdtree-git-plugin', {'on_cmd':['<Plug>NERDTreeToggle','<Plug>NERDTreeFind']})
    call dein#add('zhaocai/GoldenView.Vim', {'on_cmd':'<Plug>ToggleGoldenViewAutoResize'})
    call dein#add('thoughtbot/vim-rspec', {'on_func':['RunCurrentSpecFile','RunNearestSpec', 'RunAllSpecs', 'RunLastSpec']})
    " Groovy
    call dein#add('vim-scripts/groovy.vim', {'on_ft':'groovy'})
    " Gradle
    call dein#add('tfnico/vim-gradle', {'on_ft':'gradle'})
    " Java
    call dein#add('Dinduks/vim-java-get-set', {'on_ft':'java'})
    " C++
    call dein#add('octol/vim-cpp-enhanced-highlight', {'on_ft':['c', 'cpp', 'h']})
    call dein#add('derekwyatt/vim-protodef', {'on_ft':['c', 'cpp', 'h']})
    call dein#add('derekwyatt/vim-fswitch', {'on_ft':['c', 'cpp']})
    call dein#add('vim-scripts/DoxygenToolkit.vim', {'on_ft':['c', 'cpp']})
    call dein#add('majutsushi/tagbar', {'on_cmd':'TagbarToggle'})
    call dein#add('szw/vim-tags', {'on_ft':['c', 'cpp']})
    " general refactoring
    call dein#add('derekwyatt/vim-protodef', {'on_ft':['c', 'cpp']})
    call dein#add('huawenyu/neogdb.vim', {'on_ft':['c', 'cpp']})
    "call dein#add('dbgx/lldb.nvim', {'on_ft':['c', 'cpp']})
    " Cscope
    call dein#add('vim-scripts/cscope.vim', {'on_ft':['c', 'cpp']})
    call dein#add('JCLiang/vim-cscope-utils', {'on_ft':['c', 'cpp']})
    " Markdown
    call dein#add('vim-pandoc/vim-pandoc-syntax', {'on_ft':['markdown', 'pandoc.markdown', 'rmd']})
    call dein#add('vim-pandoc/vim-pantondoc', {'on_ft':['markdown', 'pandoc.markdown', 'rmd']})
    call dein#add('PProvost/vim-markdown-jekyll', {'on_ft':['html', 'hbs', 'markdown', 'pandoc.markdown', 'rmd']})
    call dein#add('shime/vim-livedown', {'on_ft':['markdown', 'pandoc.markdown', 'rmd']})
    call dein#add('iamcco/mathjax-support-for-mkdp', {'on_ft':['markdown', 'pandoc.markdown', 'rmd']})
    call dein#add('iamcco/markdown-preview.vim', {'on_ft':['markdown', 'pandoc.markdown', 'rmd']})
    " tex
    call dein#add('xuhdev/vim-latex-live-preview', {'on_ft':['tex', 'rmd']})
    " Perl
    "call dein#add('vim-perl/vim-perl', {'build':['make clean carp dancer highlight-all-pragmas moose test-more try-tiny']})
    " Ruby
    call dein#add('tpope/vim-rails', {'on_ft':['ruby', 'rb']})
    call dein#add('c-brenn/phoenix.vim', {'on_ft':['rb', 'ex']})
    call dein#add('tpope/vim-projectionist', {'on_ft':['rb', 'ex']})
    call dein#add("vim-ruby/vim-ruby", {'on_ft':['ruby', 'rb']})
    call dein#add("tpope/vim-rake", {'on_ft':['ruby', 'rb']})
    call dein#add("tpope/vim-bundler", {'on_ft':['ruby', 'rb']})
    call dein#add("tpope/vim-cucumber", {'on_ft':['ruby', 'rb']})
    call dein#add("slim-template/vim-slim", {'on_ft':['slim']})
    " Web
    call dein#add('othree/html5.vim', {'on_ft':['html', 'html.handlebars']})
    call dein#add('cakebaker/scss-syntax.vim', {'on_ft':['less', 'scss', 'sass']})
    call dein#add('elzr/vim-json', {'on_ft':['json']})
    call dein#add('mustache/vim-mustache-handlebars', {'on_ft':['html', 'html.handlebars']})
    call dein#add("rstacruz/sparkup", {'on_ft':['html']})
    call dein#add("tpope/vim-haml", {'on_ft':['haml', 'hamlc', 'sass', 'scss']})
    call dein#add('jamessan/vim-gnupg', {'on_ft':['gpg', 'pgp', 'asc']})
    call dein#add('evidens/vim-twig', {'on_ft':['php']})
    " erlang & elixir
    call dein#add('vim-erlang/vim-erlang-skeletons', {'on_ft':['erl']})
    call dein#add('vim-erlang/vim-erlang-omnicomplete', {'on_ft':['erl']})
    call dein#add('vim-erlang/vim-erlang-runtime', {'on_ft':['erl']})
    call dein#add('vim-erlang/vim-erlang-tags', {'on_ft':['erl']})
    call dein#add('elixir-editors/vim-elixir', {'on_ft':['ex', 'exs', 'eex']})
    call dein#add('slashmili/alchemist.vim', {'on_ft':['ex', 'esx', 'eex']})

    call dein#end()
    call dein#save_state()
endif

filetype plugin indent on
syntax enable
" ----[ Plugin Settings ]----------------------------------------------- {{{3
"
" auto install new plugins
if dein#check_install()
    call dein#install()
endi

"set rtp+=/home/ryanm/.nvim/bundles/repos/github.com/dbgx/lldb.nvim

" ----[ General Plugin Settings ]---------- {{{4
" Gitgutter setup
let g:gitgutter_realtime=0
" ----[ Language specific ]---------------- {{{4
" C-support
let  g:C_UseTool_cmake    = 'yes'
let  g:C_UseTool_doxygen = 'yes'
" Doxygen
let g:DoxygenToolkit_briefTag_pre="@Synopsis"
let g:DoxygenToolkit_paramTag_pre="@Param"
let g:DoxygenToolkit_returnTag="@Returns"
let g:DoxygenToolkit_blockHeader="--------------------------------------------------------------------------"
let g:DoxygenToolkit_blockFooter="--------------------------------------------------------------------------"
let g:DoxygenToolkit_authorName="Ryan M Sullivan"
let g:DoxygenToolkit_licenseTag="My license"
" Python
autocmd BufWinEnter *.py setlocal foldexpr=SimpylFold(v:lnum) foldmethod=expr
autocmd BufWinLeave *.py setlocal foldexpr< foldmethod<
" ----[ Ctags ]---------------------------- {{{4
let g:vim_tags_auto_generate = 1
let g:vim_tags_use_language_field = 1
let g:vim_tags_main_file = 'tags'
" lh-tags
"au BufWritePost *.c,*.cpp,*.h silent! !ctags -R &
" ----[ Cscope ]--------------------------- {{{4
" s: Find this C symbol
nnoremap  <leader>fs :call cscope#find('s', expand('<cword>'))<CR>
" g: Find this definition
nnoremap  <leader>fg :call cscope#find('g', expand('<cword>'))<CR>
" d: Find functions called by this function
nnoremap  <leader>fd :call cscope#find('d', expand('<cword>'))<CR>
" c: Find functions calling this function
nnoremap  <leader>fc :call cscope#find('c', expand('<cword>'))<CR>
" t: Find this text string
nnoremap  <leader>ft :call cscope#find('t', expand('<cword>'))<CR>
" e: Find this egrep pattern
nnoremap  <leader>fe :call cscope#find('e', expand('<cword>'))<CR>
" f: Find this file
nnoremap  <leader>ff :call cscope#find('f', expand('<cword>'))<CR>
" i: Find files #including this file
nnoremap  <leader>fi :call cscope#find('i', expand('<cword>'))<CR>
" ----[ Deoplete ]---------------------- {{{4
set rtp+=/home/ryanm/.nvim/bundles/repos/github.com/Shougo/deoplete.nvim/
let g:deoplete#enable_at_startup = 1
let g:deoplete#sources = {}

" Disable the candidates in Comment/String syntaxes.
call deoplete#custom#source('_',
            \ 'disabled_syntaxes', ['Comment', 'String'])

" language server commands
let g:LanguageClient_serverCommands = {
            \ 'cpp': ['cquery'],
            \ 'c': ['cquery'],
            \ 'python': ['/usr/bin/pyls'],
            \ 'rust': ['rustup', 'run', 'stable', 'rls'],
            \ 'haskell': ['hie-wrapper']
            \ }
let g:LanguageClient_autoStart = 1

set completefunc=LanguageClient#complete
set formatexpr=LanguageClient_textDocument_rangeFormatting()
" ----[ Neomake ]-------------------------- {{{4
" When writing a buffer.
call neomake#configure#automake('w')
" When writing a buffer, and on normal mode changes (after 1s).
"call neomake#configure#automake('nw', 1000)
" When reading a buffer (after 750ms), and when writing.
"call neomake#configure#automake('rw', 750)
" ----[ Undotree setup ]----------------------- {{{4
" let g:undotree_WindowLayout='botright'
let g:undotree_SetFocusWhenToggle=1
nnoremap <silent> <F5> :UndotreeToggle<CR>
" ----[ NERDTree setup ]------------------------ {{{4
let NERDTreeShowHidden=0
let NERDTreeQuitOnOpen=0
let g:NERDTreeUseSimpleIndicator=1
let NERDTreeShowLineNumbers=1
let NERDTreeChDirMode=2
let NERDTreeShowBookmarks=0
let NERDTreeIgnore=['\.hg', '.DS_Store']
"let NERDTreeBookmarksFile=expand(g:vimDir.'/.cache/NERDTree/NERDTreeBookmarks')
nnoremap <F2> :NERDTreeToggle<CR>
"nnoremap <F3> :NERDTreeFind<CR>
" ----[ GoldenView setup ]--------------------- {{{4
let g:goldenview__enable_default_mapping=0
nmap <F4> <Plug>ToggleGoldenViewAutoResize
" ----[ UltiSnips setup ]---------------------- {{{4
let g:UltiSnipsExpandTrigger='<c-x>'
let g:UltiSnipsJumpForwardTrigger='<c-l>'
let g:UltiSnipsJumpBackwardTrigger='<c-h>'
let g:UltiSnipsSnippetDirectories=['~/.nvim/UltiSnips/', 'UltiSnips']

" ----[ Tex Live Preview ]------------------------------- {{{4
let g:livepreview_previewer = 'zathura'
" ----[ RSpec.vim mappings ]----------------------- {{{4
map <Leader>rs :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>
let g:rspec_command = "Dispatch rspec {spec}"
" ----[ Startify Configuration ]---------------------- {{{4
"|g:autoloaded_startify|
"g:startify_bookmarks|
"g:startify_change_to_dir|
"g:startify_change_to_vcs_root|
"g:startify_custom_footer|
"g:startify_custom_header|
"g:startify_custom_indices|
"g:startify_disable_at_vimenter|
"g:startify_enable_special|
"g:startify_enable_unsafe|
"g:startify_files_number|
"g:startify_list_order|
"g:startify_relative_path|
"g:startify_session_autoload|
"g:startify_session_delete_buffers|
"g:startify_session_dir|
"let g:startify_session_dir = '~/.vim/session'
"g:startify_session_persistence|
"g:startify_session_savecmds|
"g:startify_session_savevars|
"g:startify_skiplist_server|
"g:startify_skiplist|
"Vim Startify setup
"let g:startify_session_dir = g:vimDir.'/.cache/sessions'
"let g:startify_change_to_vcs_root = 1
"let g:startify_show_sessions = 1
"nnoremap <F1> :Startify<cr>
" ----[ Rainbow setup ]-------------------------------- {{{4
let g:rainbow_active = 1 "0 if you want to enable it later via :RainbowToggle

let g:rainbow_load_separately = [
            \ [ '*' , [['(', ')'], ['\[', '\]'], ['{', '}']] ],
            \ [ '*.tex' , [['(', ')'], ['\[', '\]']] ],
            \ [ '*.cpp' , [['(', ')'], ['\[', '\]'], ['{', '}']] ],
            \ [ '*.{html,htm}' , [['(', ')'], ['\[', '\]'], ['{', '}'], ['<\a[^>]*>', '</[^>]*>']] ],
            \ ]

let g:rainbow_conf = {
            \   'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick'],
            \   'ctermfgs': ['6', '5', '14', '3', '13', '2', '9'],
            \   'operators': '_,_',
            \   'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
            \   'separately': {
            \           '*': {},
            \           'tex': {
            \                   'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],
            \           },
            \           'lisp': {
            \                   'guifgs': ['6', '5', '14', '3', '13', '2', '12', '4', '11', '9', '8', '7'],
            \           },
            \           'vim': {
            \                   'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
            \           },
            \           'html': {
            \                   'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
            \           },
            \           'css': 0,
            \   }
            \}
" ----[ Pandoc setup ]-------------------------- {{{4
let g:pandoc_use_conceal = 1
let g:pandoc_syntax_dont_use_conceal_for_rules = ['block', 'codeblock_start', 'codeblock_delim']
let g:pandoc_syntax_user_cchars = {'li': '*'}
let g:pantondoc_use_pandoc_markdown = 1
"let g:pandoc#formatting#equalprg = \"pandoc -t markdown --no-wrap --atx-headers"
" ----[ Livedown setup ]----------------------- {{{4
let g:livedown_open = 1
let g:livedown_port = 1337
let g:livedown_browser = "qutebrowser"
" ----[ vim-markdown-preview ]----------------- {{{4
let vim_markdown_preview_toggle=2
let vim_markdown_preview_browser='qutebrowser'
"---- [ markdown-preview ]--------------------- {{{4
let g:mkdp_path_to_chrome = "qutebrowser"
" ----[ eclim ]-------------------------------- {{{4
"Run Checkstyle on open/write
set rtp^=/usr/share/vim/vimfiles/
autocmd BufWinEnter *.java :Checkstyle
autocmd BufWritePost *.java :Checkstyle
let g:EclimCompletionMethod = 'omnifunc'
" ----[ Neogdb ]---------------------------------------- {{{4
let g:neobugger_leader = ';'
nmap <Space>p :call neobugger#gdb#Send("print " . expand('<cword>'))<CR>

function! NeogdbvimNmapCallback()
    " Let fzf.vim open files in the current window by default.
    " This is so that, when navigating files,
    " we don't switch to a new tab and thus *always* see the neogdb's splits.
    let g:fzf_action = { 'enter': 'edit' }
endfunc

function! NeogdbvimUnmapCallback()
    " Quitting to normal editing. Let fzf.vim open files in the new tab,
    " as usual.
    let g:fzf_action = { 'enter': 'tabnew' }
endfunc

let g:neogdb_window = ['breakpoint', 'backtrace']
" ----[ Fugitive setup ]-------------------- {{{4
nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>gd :Gdiff<CR>
nnoremap <silent> <leader>gc :Gcommit<CR>
nnoremap <silent> <leader>gb :Gblame<CR>
nnoremap <silent> <leader>gl :Glog<CR>
nnoremap <silent> <leader>gp :Git push<CR>
nnoremap <silent> <leader>gw :Gwrite<CR>
nnoremap <silent> <leader>gr :Gremove<CR>
autocmd FileType gitcommit nmap <buffer> U :Git checkout -- <C-r><C-g><CR>
autocmd BufReadPost fugitive://* set bufhidden=delete
" ----[ Vim-Multiple-Cursors ]---------- {{{4
" Default mapping
"let g:multi_cursor_next_key='<C-n>'
"let g:multi_cursor_prev_key='<C-p>'
"let g:multi_cursor_skip_key='<C-x>'
"let g:multi_cursor_quit_key='<Esc>'
" Called once right before you start selecting multiple cursors
function! Multiple_cursors_before()
    if exists(':NeoCompleteLock')==2
        exe 'NeoCompleteLock'
    endif
endfunction
" Called once only when the multiple selection is canceled (default <Esc>)
function! Multiple_cursors_after()
    if exists(':NeoCompleteUnlock')==2
        exe 'NeoCompleteUnlock'
    endif
endfunction
" Default highlighting
highlight multiple_cursors_cursor term=reverse cterm=reverse gui=reverse
highlight link multiple_cursors_visual Visual
" ----[ Airline ]---------------------- {{{4
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.crypt = 'Ǣ'
let g:airline_symbols.linenr = 'ב'
let g:airline_symbols.linenr = 'ג'
let g:airline_symbols.linenr = '≓'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.maxlinenr = 'Ξ'
let g:airline_symbols.maxlinenr = '☰'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.spell = 'Ꞩ'
let g:airline_symbols.notexists = '∄'
let g:airline_symbols.whitespace = '␣'
" ========{ Formatting }================================================== " {{{2
set backup
"set backupskip=/tmp/*,/private/tmp/*",*.gpg
set backupdir=~/.nvim/tmp/.backup//,/tmp
set undodir=~/.nvim/tmp/.undo//,/tmp
set directory=~/.nvim/tmp/.swp//,/tmp
set browsedir=buffer
set history=10000
"set autochdir
set mouse=a
set number
set ruler
set showcmd
set nohlsearch
set ignorecase
set showmatch
set autoindent
set laststatus=2
set tabstop=4
set shiftwidth=4
set expandtab
set hidden
set nospell
set encoding=utf-8
set termencoding=big5
set fileencoding=utf-8
set fileencodings=big5,utf-8
set fileformat=unix
set fileformats=unix,dos,mac
set formatprg=par
set cursorline
set nowrap
set completeopt=longest,menuone
set cot -=preview
set wildmenu
set wildchar=<TAB>
set wildmode=list:longest,list:full
set wildignore=*.o,*.class,*.pyc
set timeoutlen=1000 ttimeoutlen=0
set list lcs=tab:▸\ ,eol:¬,extends:❯,precedes:❮
set noshowmode
set cmdheight=1
set visualbell t_vb=".
set tags=tags;
set fdm=marker
set splitbelow
set splitright
set backspace=indent,eol,start
set shell=/bin/zsh
set omnifunc=syntaxcomplete#Complete
highlight LineNr ctermfg=grey
let perl_include_pod = 1
let perl_extended_vars = 1 " syntax color complex things like @{${foo}}
" ========{ Basic UI Configuration }====================================== " {{{2
" ----[ Leaders ]---------------------------------------- {{{3
map Q gq " Don't use Ex mode, use Q for formatting
let leader = "," " remap leader to z (from \)
let g:leader = "," " remap leader to z (global)
let  mapleader = "," " remap leader to , (from \)
let g:mapleader = "," " remap leader to z (global)
map <leader>r :source ~/.config/nvim/init.vim<cr>
set pastetoggle=<leader>P
nnoremap <leader>q :q!<cr>
nnoremap <leader>w :w<cr>
nnoremap <leader>z :wq!<cr>
nnoremap <leader>\ :TagbarToggle<CR>
nmap <silent> <leader>y :FSHere<cr>
" Notes
nnoremap <leader>N :Note
nnoremap <leader>[ :Ngrep
" ----[ Plugin Maps ]------------------------------------------------ {{{3
"  Vim protodef
"  pull defs to cursor <leader>PP
"  vim livedown
map <leader>gm :call LivedownPreview()<CR>
" lldb mapping
" map <leader>O :LLsession new<CR>
" map <leader>P :LLmode debug<CR>
" map <leader>L :LLmode code<CR>
" nmap <leader>F  <Plug>LLBreakSwitch
" map <leader>C :LL continue<CR>
" map <leader>M :LL step<CR>
" map <leader>N :LL next<CR>
" color break symbol
"hi LLBreakpointSign ctermfg=cyan
" vmap <F2> <Plug>LLStdInSelected
" nnoremap <F4> :LLstdin<CR>
" nnoremap <S-F8> :LL process interrupt<CR>
" nnoremap <F9> :LL print <C-R>=expand('<cword>')<CR>
" vnoremap <F9> :<C-U>LL print <C-R>=lldb#util#get_selection()<CR><CR>
"  dispatch
nnoremap <F9> :Dispatch<CR>

" deoplete tab-complete
inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"
" tern
autocmd FileType javascript nnoremap <silent> <buffer> gb :TernDef<CR>
" deoplete language client
nnoremap <F5> :call LanguageClient_contextMenu()<CR>
" Or map each action separately
nnoremap <silent> H :call LanguageClient#textDocument_hover()<CR>
nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
nnoremap <silent> nn :call LanguageClient#textDocument_rename()<CR>

" Ferret
" |:Ack| search <leader>a
" |:Ack| search wd under cursor <leader>s

" Ultisnippts mapped in plugin settings
" g:UltiSnipsExpandTrigger='<c-x>'
" g:UltiSnipsJumpForwardTrigger='<c-j>'
" g:UltiSnipsJumpBackwardTrigger='<c-k>'
" ----[ Mappings ]---------------------------------------- {{{3
"  smart tab complete
au FileType erl inoremap <tab> <c-r>=Smart_TabComplete()<CR>
" Navigate Vim Splits
nnoremap <C-J> <C-W><C-J> "Ctrl-j to move down a split
nnoremap <C-K> <C-W><C-K> "Ctrl-k to move up a split
nnoremap <C-L> <C-W><C-L> "Ctrl-l to move    right a split
nnoremap <C-H> <C-W><C-H> "Ctrl-h to move left a split
" ,g generates the header guard
map <leader>h :call IncHeader()<CR>
" new tab
map <C-t><C-t> :tabnew<CR>
" close tab
map <C-t><C-z> :tabclose<CR>
" Bash like keys for the command line
cnoremap <C-A> <Home>
cnoremap <C-E> <End>
cnoremap <C-K> <C-U>
" allow multiple indentation/deindentation in visual mode
vnoremap < <gv
vnoremap > >gv
" :cd. change working directory t6o that of the current file
cmap cd. lcd %:p:h<cr>
" spell lang
nnoremap <F3> :call CycleLang()<CR>
" Notes & Pandoc
nnoremap <C-n> :cnext<cr>
nnoremap <C-N> :cprevious<cr>
" Symbols ---------------------------------- {{{4
" map! <C-v>ta τ
" map! <C-v>ph ϕ
" Math
" map! <C-v>ll →
" map! <C-v>hh ⇌
" map! <C-v>kk ↑
" map! <C-v>jj ↓
" map! <C-v>= ∝
" map! <C-v>~ ≈
" map! <C-v>!= ≠
" map! <C-v>!> ⇸
" map! <C-v>~> ↝
" map! <C-v>>= ≥
" map! <C-v><= ≤
" map! <C-v>0  °
" map! <C-v>ce ¢
" map! <C-v>*  •
" map! <C-v>co ⌘

" Greek
map! <C-v>A Α
map! <C-v>a α
map! <C-v>B Β
map! <C-v>b β
map! <C-v>G Γ
map! <C-v>g γ
map! <C-v>D Δ
map! <C-v>d δ
map! <C-v>E Ε
map! <C-v>e ε
map! <C-v>Z Ζ
map! <C-v>z ζ
map! <C-v>H Η
map! <C-v>h η
map! <C-v>T Θ
map! <C-v>t θ
map! <C-v>I Ι
map! <C-v>i ι
map! <C-v>K Κ
map! <C-v>k κ
map! <C-v>L Λ
map! <C-v>l λ
map! <C-v>M Μ
map! <C-v>m μ
map! <C-v>N Ν
map! <C-v>n ν
map! <C-v>C Ξ
map! <C-v>c ξ
map! <C-v>O Ο
map! <C-v>o ο
map! <C-v>P Π
map! <C-v>p π
map! <C-v>R Ρ
map! <C-v>r ρ
map! <C-v>S Σ
map! <C-v>s σ
map! <C-v>T Τ
map! <C-v>t τ
map! <C-v>U Υ
map! <C-v>u υ
map! <C-v>F Φ
map! <C-v>f φ
map! <C-v>X Χ
map! <C-v>x χ
map! <C-v>Y ψ
map! <C-v>y ψ
map! <C-v>W Ω
map! <C-v>w ω
" Math
map! <C-v>fa ∀
map! <C-v>te ∃
map! <C-v>(- ∈
map! <C-v>-) ∋
map! <C-v>(u ∩
map! <C-v>u) ∪
map! <C-v>in ∫
map! <C-v>di ∬
map! <C-v>io ∮
map! <C-v>tf ∴
map! <C-v>bc ∵
map! <C-v>ae ≅
map! <C-v>ne ≠
map! <C-v>>= ≥
map! <C-v><= ≤
map! <C-v><= ⇐
map! <C-v>=> ⇒
map! <C-v>== ⇔
map! <C-v>ns ∅
map! <C-v>pd ∂
map! <C-v>00 ∞
" French
map! <C-v>A> Â
map! <C-v>a> â
map! <C-v>A' Á
map! <C-v>a' á
map! <C-v>A` À
map! <C-v>a` À
map! <C-v>E> Ê
map! <C-v>e> ê
map! <C-v>E' É
map! <C-v>e' é
map! <C-v>E` È
map! <C-v>e` è
map! <C-v>O> Ô
map! <C-v>o> ô
map! <C-v>O' Ó
map! <C-v>o' ó
map! <C-v>O! Ò
map! <C-v>o! ò
map! <C-v>L' Ĺ
map! <C-v>l' ĺ
map! <C-v>C, Ç
map! <C-v>c, ç
map! <C-v>S, Ş
map! <C-v>s, ş
" Misc
map! <C-v>hh ←
map! <C-v>jj ↓
map! <C-v>kk ↑
map! <C-v>ll →
map! <C-v>hl ↔
" Subscript and Superscript
map! <C-v>1 ~1~
map! <C-v>2 ~2~
map! <C-v>3 ~3~
map! <C-v>4 ~4~
map! <C-v>5 ~5~
map! <C-v>6 ~6~
map! <C-v>7 ~7~
map! <C-v>8 ~8~
map! <C-v>9 ~9~
map! <C-v>== ^+^
map! <C-v>=2 ^2+^
map! <C-v>=3 ^3+^
map! <C-v>-- ^-^
map! <C-v>-2 ^2-^
map! <C-v>-3 ^3-^
" ----[ Commands ]-------------------------------------{{{3
autocmd! bufwritepost init.vim source ~/.config/nvim/init.vim " auto reload vimrc when editing it
" Enable omni completion. (Ctrl-X Ctrl-O)
" augroup omnifuncs
"     autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
"     autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
"     autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
"     autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
"     autocmd FileType css set omnifunc=csscomplete#CompleteCSS
"     autocmd FileType c,cpp set omnifunc=ccomplete#Complete
"     autocmd FileType java set omnifunc=javacomplete#Complete
"     autocmd FileType java setlocal omnifunc=javacomplete#Complete
" augroup end

" tern
if exists('g:plugs["tern_for_vim"]')
    let g:tern_show_argument_hints = 'on_hold'
    let g:tern_show_signature_in_pum = 1
    autocmd FileType javascript setlocal om6nifunc=tern#Complete
endif
" Recognize mathmatica files
autocmd BufNewFile,BufRead *.wl set filetype=mma
autocmd BufNewFile,BufRead *.wls set filetype=mma
" make CSS omnicompletion work for SASS and SCSS
autocmd BufNewFile,BufRead *.scss             set ft=scss.css
autocmd BufNewFile,BufRead *.sass             set ft=sass.css
autocmd FileType perl set autoindent|set smartindent|syntax on
" turn on list chars for dotfiles and notes
" folds
command! -nargs=+ Foldsearch exe "normal /".<q-args>."^M" | setlocal foldexpr=(getline(v:lnum)=~@/)?0:(getline(v:lnum-1)=~@/)\|\|(getline(v:lnum+1)=~@/)?1:2 foldmethod=expr foldlevel=0 foldcolumn=2
" Notes & Pandoc
let g:semester = system('echo -n "$SEMESTER"')
command! -nargs=1 Note exe "e! " . fnameescape($NOTES_DIR . "/" . $YEAR . "/" . $SEMESTER . "/<args>.md")
command! -nargs=1 Ngrep lvimgrep "<args>" $NOTES_DIR/**/*.md
augroup markdown
    au!
    au BufNewFile,BufRead,BufWrite   *.txt,*.md,*.mkd,*.markdown,*.mdwn setl ft=rmd
    au BufRead,BufNewFile,BufEnter   $NOTES_DIR/*/*.txt let &complete="$NOTES_DIR/**/*.txt"
    au BufRead,BufNewFile,BufEnter   $NOTES_DIR/*/*.txt lcd %:h
    "au BufRead,BufWrite,InsertChange $NOTES_DIR/*/*.txt syn match ErrorMsg '\%>79v.\+'
    au Filetype rmd map <C-c> :!echo<space>"require(rmarkdown);<space>render('<c-r>%')"<space>\|<space>R<space>--vanilla<enter>
augroup end

command! -complete=file -nargs=1 Rpdf :r !pdftotext -nopgbrk <q-args> -
command! -complete=file -nargs=1 Rpdf :r !pdftotext -nopgbrk <q-args> - |fmt -csw78

" augroup lLength
"   autocmd BufEnter * highlight OverLength ctermbg=11 ctermfg=9 guibg=11
"   autocmd BufEnter * match OverLength /\%79v.*/
" augroup END
" ========{ Vim Script Functions }======================================== " {{{2
" ----[ Make the 81st column stand out ]--------------------------- {{{3
"  " OR ELSE just the 81st column of wide lines...
highlight ColorColumn ctermbg=9 ctermfg=7
call matchadd('ColorColumn', '\%81v', 100)
" ----[ Highlight matches when jumping to next ]------------------- {{{3
" This rewires n to do the highlighing...
"nnoremap <silent> n   n:call HLNext(0.4)<cr>
" OR ELSE just highlight the match in gold...
" fun! HLNext (blinktime)
"     let [bufnum, lnum, col, off] = getpos('.')
"     let matchlen = strlen(matchstr(strpart(getline('.'),col-1),@/))
"     let target_pat = '\c\%#\%('.@/.'\)'
"     let ring = matchadd('WhiteOnRed', target_pat, 101)
"     redraw
"     exec 'sleep ' . float2nr(a:blinktime * 1000) . 'm'
"     call matchdelete(ring)
"     redraw
" endfun
" ----[ Always turn on syntax highlighting for diffs ]------------------ {{{3
" EITHER select by the file-suffix directly...
augroup PatchDiffHighlight
    autocmd!
    autocmd BufEnter  *.patch,*.rej,*.diff   syntax enable
augroup END
" OR ELSE use the filetype mechanism to select automatically...
filetype on
augroup PatchDiffHighlight
    autocmd!
    autocmd FileType diff   syntax enable
augroup END
" ----[ Open file with existing swp in readonly mode ]--------- {{{3
augroup NoSimultaneousEdits
    autocmd!
    autocmd SwapExists * let v:swapchoice = 'o'
    autocmd SwapExists * echomsg
    autocmd SwapExists * echo 'Duplicate edit session (readonly)'
    autocmd SwapExists * echohl None
    autocmd SwapExists * sleep 2
augroup END
" ----[ IncHeader ]-------------------------------------------------- {{{3
fun! IncHeader()
    let date = strftime("%B %d, %Y")
    call append(0, "" . "")
    call append(0, "/*" . "")
    call append(1, " * " . "Sullivan, Ryan")
    call append(2, " *" . "")
    call append(3, " * " . "CS A250")
    call append(4, " * " . date)
    call append(5, " *" . "")
    call append(6, " * " . "Lab ")
    call append(7, " */" . "")
endfun
" ----[ CycleLang ]------------------------------ {{{3
fun! CycleLang()
    let langs = ['', 'en_us', 'fr']

    let i = index(langs, &spl)
    let j = (i+1)%len(langs)
    let &spl = langs[j]

    if empty(&spl)
        set nospell
    else
        set spell
        hi clear SpellBad
        hi SpellBad cterm=underline ctermfg=9
    endif
endfun
" ----[ file Encoding ]-------------------------------------------- {{{3
fun! ViewUTF8()
    set encoding=utf-8
    set termencoding=big5
endfun

fun! UTF8()
    set encoding=utf-8
    set termencoding=big5
    set fileencoding=utf-8
    set fileencodings=big5,utf-8
endfun

fun! Big5()
    set encoding=big5
    set fileencoding=big5
endfun
" ----[ Extended Text Objects ]----------------------------------------- {{{3
let s:items = [ "<bar>", "\\", "/", ":", ".", "*", "_" ]
for item in s:items
    exe "nnoremap yi".item." T".item."yt".item
    exe "nnoremap ya".item." F".item."yf".item
    exe "nnoremap ci".item." T".item."ct".item
    exe "nnoremap ca".item." F".item."cf".item
    exe "nnoremap di".item." T".item."dt".item
    exe "nnoremap da".item." F".item."df".item
    exe "nnoremap vi".item." T".item."vt".item
    exe "nnoremap va".item." F".item."vf".item
endfor
" ----[ Smart Tab Complete ]--------------------------------------------{{{3
function! Smart_TabComplete()
  let line = getline('.')                         " current line

  let substr = strpart(line, -1, col('.')+1)      " from the start of the current
                                                  " line to one character right
                                                  " of the cursor
  let substr = matchstr(substr, "[^ \t]*$")       " word till cursor
  if (strlen(substr)==0)                          " nothing to match on empty string
    return "\<tab>"
  endif
  let has_period = match(substr, '\.') != -1      " position of period, if any
  let has_slash = match(substr, '\/') != -1       " position of slash, if any
  if (!has_period && !has_slash)
    return "\<C-X>\<C-P>"                         " existing text matching
  elseif ( has_slash )
    return "\<C-X>\<C-F>"                         " file matching
  else if
    return "\<C-X>\<C-O>"                         " plugin matching
  else
      return "\<tab>"
  endif
endfunction
